name: Deploy Server Service
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  push_to_dockerhub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/swecc-server:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/swecc-server:${{ github.sha }}

  deploy_to_swarm:
    runs-on:
      group: EC2
      labels: [self-hosted, deploy]

    needs: push_to_dockerhub

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub on deployment server
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull latest image
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/swecc-server:latest

      - name: Deploy server service
        run: |
          if docker service ls | grep -q "server"; then
            docker service update \
              --image ${{ secrets.DOCKERHUB_USERNAME }}/swecc-server:latest \
              --update-parallelism 1 \
              --update-delay 30s \
              --update-order start-first \
              --update-failure-action continue \
              --limit-cpu 0.5 \
              --limit-memory 512M \
              --reserve-cpu 0.1 \
              --reserve-memory 128M \
              --with-registry-auth \
              server
          else
            docker service rm server || true

            docker config inspect server_env --pretty | sed -n '/Data:/,$ p' | sed '1d' > env_file.txt || echo "No config found"

            docker service create \
              --name server \
              --network prod_swecc-network \
              --env-file env_file.txt \
              --replicas 1 \
              --restart-condition any \
              --update-parallelism 1 \
              --update-delay 30s \
              --update-order start-first \
              --update-failure-action continue \
              --limit-cpu 0.5 \
              --limit-memory 512M \
              --reserve-cpu 0.1 \
              --reserve-memory 128M \
              --with-registry-auth \
              ${{ secrets.DOCKERHUB_USERNAME }}/swecc-server:latest

            rm env_file.txt || true
          fi

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          timeout=300
          elapsed=0

          echo "Waiting 3 seconds before starting verification..."
          sleep 3

          while [ $elapsed -lt $timeout ]; do
            REPLICAS=$(docker service ls --filter "name=server" --format "{{.Replicas}}")
            echo "Current replica status: $REPLICAS"

            if [ "$REPLICAS" == "1/1" ]; then
              echo "✅ Service deployed successfully"
              exit 0
            fi

            echo "⏳ Waiting for service to be fully deployed... ($elapsed/$timeout seconds)"
            sleep 10
            elapsed=$((elapsed + 10))

            echo "Current service status:"
            docker service ps server --no-trunc

            if docker service ps server --filter "desired-state=running" --format "{{.Error}}" | grep -q .; then
              echo "⚠️ Deployment showing errors, but continuing to wait..."
            fi
          done

          echo "❌ Deployment verification timed out after $timeout seconds"
          echo "Final service status:"
          docker service ps server --no-trunc
          exit 1